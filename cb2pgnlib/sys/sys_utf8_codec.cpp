// ======================================================================
// Author : $Author$
// Version: $Revision$
// Date   : $Date$
// Url    : $URL$
// ======================================================================

// ======================================================================
// Copyright: (C) 2009-2013 Gregor Cramer
// ======================================================================

// ======================================================================
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
// ======================================================================

#include "sys_utf8_codec.h"
#include "sys_utf8.h"
#include "sys_base.h"

#include "tcl_base.h"

#include "m_string.h"
#include "m_utility.h"
#include "m_assert.h"

#include "u_base.h"

#include <tcl.h>
#include <ctype.h>
#include <string.h>
#include <stdlib.h>
#include <stdio.h>

using namespace sys::utf8;
using namespace tcl;


static char const* const NonDiacriticsTables[28][256] =
{
#define ___ 0
	// Table 0
	{
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 " ",  "!", "\"",  "#",  "$",  "%",  "&",  "'",  "(",  ")",  "*",  "+",  ",",  "-",  ".",  "/",
		 "0",  "1",  "2",  "3",  "4",  "5",  "6",  "7",  "8",  "9",  ":",  ";",  "<",  "=",  ">",  "?",
		 "@",  "A",  "B",  "C",  "D",  "E",  "F",  "G",  "H",  "I",  "J",  "K",  "L",  "M",  "N",  "O",
		 "P",  "Q",  "R",  "S",  "T",  "U",  "V",  "W",  "X",  "Y",  "Z",  "[", "\\",  "]",  "^",  "_",
		 "`",  "a",  "b",  "c",  "d",  "e",  "f",  "g",  "h",  "i",  "j",  "k",  "l",  "m",  "n",  "o",
		 "p",  "q",  "r",  "s",  "t",  "u",  "v",  "w",  "x",  "y",  "z",  "{",  "|",  "}",  "~",  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  "a",  ___,  ___,  ___,  ___,  ___,
		 "°",  ___,  ___,  ___,  ___,  ___,  ___,  "-",  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 "A",  "A",  "A",  "A", "Ae",  "A", "Ae",  "C",  "E",  "E",  "E",  "E",  "I",  "I",  "I",  "I",
		"Dh",  "N",  "O",  "O",  "O",  "O",  "O",  ___,  "O",  "U",  "U",  "U", "Ue",  "Y", "Th", "ss",
		 "a",  "a",  "a",  "a", "ae",  "a", "ae",  "c",  "e",  "e",  "e",  "e",  "i",  "i",  "i",  "i",
		"dh",  "n",  "o",  "o",  "o",  "o", "oe",  ___,  "o",  "u",  "u",  "u", "ue",  "y", "th",  "y",
	},
	// Table 1
	{
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 " ",  "!", "\"",  "#",  "$",  "%",  "&",  "'",  "(",  ")",  "*",  "+",  ",",  "-",  ".",  "/",
		 "0",  "1",  "2",  "3",  "4",  "5",  "6",  "7",  "8",  "9",  ":",  ";",  "<",  "=",  ">",  "?",
		 "@",  "A",  "B",  "C",  "D",  "E",  "F",  "G",  "H",  "I",  "J",  "K",  "L",  "M",  "N",  "O",
		 "P",  "Q",  "R",  "S",  "T",  "U",  "V",  "W",  "X",  "Y",  "Z",  "[", "\\",  "]",  "^",  "_",
		 "`",  "a",  "b",  "c",  "d",  "e",  "f",  "g",  "h",  "i",  "j",  "k",  "l",  "m",  "n",  "o",
		 "p",  "q",  "r",  "s",  "t",  "u",  "v",  "w",  "x",  "y",  "z",  "{",  "|",  "}",  "~",  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 "°",  ___,  ___,  ___,  ___,  ___,  ___,  "-",  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  "A",  "A",  "A",  "A",  ___,  ___,  "C",  "E",  "E",  ___,  "E",  ___,  "I",  "I",  "I",
		 "D",  ___,  ___,  "O",  "O",  "O",  "O",  ___,  ___,  ___,  "U",  "U",  "U",  "Y",  ___, "ss",
		 ___,  "a",  "a",  "a",  "a",  ___,  ___,  "c",  "e",  "e",  ___,  "e",  ___,  "i",  "i",  "i",
		 ___,  ___,  ___,  "o",  "o",  "o",  "o",  ___,  ___,  ___,  "u",  "u",  "u",  "y",  ___,  ___,
	},
	// Table 2
	{
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 " ",  "!", "\"",  "#",  "$",  "%",  "&",  "'",  "(",  ")",  "*",  "+",  ",",  "-",  ".",  "/",
		 "0",  "1",  "2",  "3",  "4",  "5",  "6",  "7",  "8",  "9",  ":",  ";",  "<",  "=",  ">",  "?",
		 "@",  "A",  "B",  "C",  "D",  "E",  "F",  "G",  "H",  "I",  "J",  "K",  "L",  "M",  "N",  "O",
		 "P",  "Q",  "R",  "S",  "T",  "U",  "V",  "W",  "X",  "Y",  "Z",  "[", "\\",  "]",  "^",  "_",
		 "`",  "a",  "b",  "c",  "d",  "e",  "f",  "g",  "h",  "i",  "j",  "k",  "l",  "m",  "n",  "o",
		 "p",  "q",  "r",  "s",  "t",  "u",  "v",  "w",  "x",  "y",  "z",  "{",  "|",  "}",  "~",  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 "°",  ___,  ___,  ___,  ___,  ___,  ___,  "-",  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 "A",  "A",  "A",  "A",  "A",  ___,  ___,  "C",  "E",  "E",  "E",  "E",  ___,  "I",  "I",  "I",
		 ___,  "N",  "O",  "O",  "O",  "O",  "O",  ___,  ___,  "U",  "U",  "U",  "U",  ___,  ___, "ss",
		 "a",  "a",  "a",  "a",  "a",  ___,  ___,  "c",  "e",  "e",  "e",  "e",  ___,  "i",  "i",  "i",
		 ___,  "n",  "o",  "o",  "o",  "o",  "o",  ___,  ___,  "u",  "u",  "u",  "u",  ___,  ___,  ___,
	},
	// Table 3
	{
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 " ",  "!", "\"",  "#",  "$",  "%",  "&",  "'",  "(",  ")",  "*",  "+",  ",",  "-",  ".",  "/",
		 "0",  "1",  "2",  "3",  "4",  "5",  "6",  "7",  "8",  "9",  ":",  ";",  "<",  "=",  ">",  "?",
		 "@",  "A",  "B",  "C",  "D",  "E",  "F",  "G",  "H",  "I",  "J",  "K",  "L",  "M",  "N",  "O",
		 "P",  "Q",  "R",  "S",  "T",  "U",  "V",  "W",  "X",  "Y",  "Z",  "[", "\\",  "]",  "^",  "_",
		 "`",  "a",  "b",  "c",  "d",  "e",  "f",  "g",  "h",  "i",  "j",  "k",  "l",  "m",  "n",  "o",
		 "p",  "q",  "r",  "s",  "t",  "u",  "v",  "w",  "x",  "y",  "z",  "{",  "|",  "}",  "~",  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 "°",  ___,  ___,  ___,  ___,  ___,  ___,  "-",  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  "A",  "A",  ___,  "A",  ___,  ___,  "C",  ___,  ___,  "E",  "E",  ___,  ___,  "I",  "I",
		 ___,  ___,  ___,  ___,  "O",  ___,  "O",  ___,  ___,  ___,  ___,  "U",  "U",  "Y",  ___, "ss",
		 ___,  "a",  "a",  ___,  "a",  ___,  ___,  "c",  ___,  ___,  "e",  "e",  ___,  ___,  "i",  "i",
		 ___,  ___,  ___,  ___,  "o",  ___,  "o",  ___,  ___,  ___,  ___,  "u",  "u",  "y",  ___,  ___,
	},
	// Table 4
	{
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 " ",  "!", "\"",  "#",  "$",  "%",  "&",  "'",  "(",  ")",  "*",  "+",  ",",  "-",  ".",  "/",
		 "0",  "1",  "2",  "3",  "4",  "5",  "6",  "7",  "8",  "9",  ":",  ";",  "<",  "=",  ">",  "?",
		 "@",  "A",  "B",  "C",  "D",  "E",  "F",  "G",  "H",  "I",  "J",  "K",  "L",  "M",  "N",  "O",
		 "P",  "Q",  "R",  "S",  "T",  "U",  "V",  "W",  "X",  "Y",  "Z",  "[", "\\",  "]",  "^",  "_",
		 "`",  "a",  "b",  "c",  "d",  "e",  "f",  "g",  "h",  "i",  "j",  "k",  "l",  "m",  "n",  "o",
		 "p",  "q",  "r",  "s",  "t",  "u",  "v",  "w",  "x",  "y",  "z",  "{",  "|",  "}",  "~",  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 "°",  ___,  ___,  ___,  ___,  ___,  ___,  "-",  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 "A",  "A",  "A",  "A",  "A",  ___,  ___,  "C",  "E",  "E",  "E",  "E",  ___,  "I",  "I",  "I",
		 ___,  "N",  "O",  "O",  "O",  "O",  "O",  ___,  ___,  "U",  "U",  "U",  "U",  ___,  ___, "ss",
		 "a",  "a",  "a",  "a",  "a",  ___,  ___,  "c",  "e",  "e",  "e",  "e",  ___,  "i",  "i",  "i",
		 ___,  "n",  "o",  "o",  "o",  "o",  "o",  ___,  ___,  "u",  "u",  "u",  "u",  ___,  ___,  ___,
	},
	// Table 5
	{
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 " ",  "O", "\"",  "u",  "U",  "%",  "o",  "'",  "(",  ")",  "*",  "O",  ",",  "-",  ".",  "/",
		 "0",  "1",  "2",  "3",  "4",  "5",  "6",  "7",  "8",  "9",  ":",  ";",  "O",  "U",  "u",  "o",
		 "@",  "A",  "B",  "C",  "D",  "E",  "F",  "G",  "H",  "I",  "J",  "K",  "L",  "M",  "N",  "O",
		 "P",  "Q",  "R",  "S",  "T",  "U",  "V",  "W",  "X",  "Y",  "Z",  "[",  "o",  "]",  "U",  "_",
		 "o",  "a",  "b",  "c",  "d",  "e",  "f",  "g",  "h",  "i",  "j",  "k",  "l",  "m",  "n",  "o",
		 "p",  "q",  "r",  "s",  "t",  "u",  "v",  "w",  "x",  "y",  "z",  "o",  "U",  "u",  "u",  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 "°",  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 "A",  "A",  "A",  "A",  ___,  ___,  ___,  "C",  "E",  "E",  "E",  ___,  "I",  "I",  "I",  ___,
		 "D",  ___,  "O",  "O",  "O",  "O",  ___,  ___,  ___,  "U",  "U",  "U",  ___,  "Y",  ___,  ___,
		 "a",  "a",  "a",  "a",  ___,  ___,  ___,  "c",  "e",  "e",  "e",  "e",  "i",  "i",  "i",  "i",
		 ___,  ___,  "o",  "o",  "o",  "o",  ___,  ___,  ___,  "u",  "u",  "u",  ___,  "y",  ___,  ___,
	},
	// Table 6
	{
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 "A",  "a",  "A",  "a",  "A",  "a",  "A",  "a",  "A",  "a",  "A",  "a",  "A",  "a",  "A",  "a",
		 "A",  "a",  "A",  "a",  "A",  "a",  "A",  "a",  "E",  "e",  "E",  "e",  "E",  "e",  "E",  "e",
		 "E",  "e",  "E",  "e",  "E",  "e",  "E",  "e",  "I",  "i",  "I",  "i",  "O",  "o",  "O",  "o",
		 "O",  "o",  "O",  "o",  "O",  "o",  "O",  "o",  "O",  "o",  "O",  "o",  "O",  "o",  "O",  "o",
		 "O",  "o",  "@",  "o",  "U",  "u",  "U",  "u",  "U",  "u",  "U",  "u",  "U",  "u",  "U",  "u",
		 "U",  "u",  "Y",  "y",  "Y",  "y",  "Y",  "y",  "Y",  "y",  ___,  ___,  ___,  ___,  ___,  ___,
	},
	// Table 7
	{
		 ___,  ___,  "A",  "a",  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  "d",  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  "I",  "i",  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___, "Oe", "oe",  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  "U",  "u",  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 "O",  "o",  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  "U",
		 "u",  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
	},
	// Table 8
	{
		 "A",  "a",  "A",  "a",  "A",  "a",  "C",  "c",  ___,  ___,  ___,  ___,  "C",  "c",  "D", "d'",
		 "D",  "d",  "E",  "e",  ___,  ___,  "E",  "e",  "E",  "e",  "E",  "e",  ___,  ___,  ___,  ___,
		 ___,  ___,  "G",  "g",  ___,  ___,  ___,  ___,  ___,  ___,  "I",  "i",  ___,  ___,  "I",  "i",
		 ___,  ___,  ___,  ___,  ___,  ___,  "K",  "k",  ___,  "L",  "l",  "L",  "l", "L'", "l'",  ___,
		 ___,  "L",  "l",  "N",  "n",  "N",  "n",  "N",  "n",  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 "O",  "o",  ___,  ___,  "R",  "r",  ___,  ___,  "R",  "r",  "S",  "s",  ___,  ___,  "S",  "s",
		 "S",  "s",  "T",  "t",  "T", "t'",  ___,  ___,  ___,  ___,  "U",  "u",  "U",  "u",  "U",  "u",
		 "U",  "u",  "U",  "u",  ___,  ___,  ___,  ___,  ___,  "Z",  "z",  "Z",  "z",  "Z",  "z",  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  "A",  "a",  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
	},
	// Table 9
	{
		 "A",  "a",  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  "C",  "c",  ___,  ___,  ___,  ___,
		 ___,  ___,  "E",  "e",  ___,  ___,  ___,  ___,  "E",  "e",  ___,  ___,  ___,  ___,  "G",  "g",
		 "G",  "g",  ___,  ___,  ___,  ___,  "H",  "h",  ___,  ___,  "I",  "i",  ___,  ___,  ___,  ___,
		 "I",  "i",  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  "L",  "l",  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  "O",  "o",  ___,  ___,
		 ___,  ___, "Oe", "oe",  ___,  ___,  ___,  ___,  ___,  ___,  "S",  "s",  ___,  ___,  "S",  "s",
		 "S",  "s",  "T",  "t",  ___,  ___,  ___,  ___,  ___,  ___,  "U",  "u",  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  "W",  "w",  ___,  ___,  ___,  ___,  ___,  "Z",  "z",  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  "G",  "g",  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
	},
	// Table 10
	{
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  "D",  "d",  "D",  "d",
		 "D",  "d",  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  "H",  "h",  ___,  ___,  "H",  "h",  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  "N",  "n",  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  "R",  "r",
		 ___,  ___,  "S",  "s",  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  "T",  "t",  "T",  "t",
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  "Z",  "z",  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
	},
	// Table 11
	{
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  "C",  "c",  ___,  ___,
		 ___, "dh",  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  "N",  "n",  ___,  ___,  ___,  ___,
		 "O",  "o", "Oe", "oe",  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 "S",  "s",  ___,  ___,  ___,  ___,  "T",  "t",  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 "U",  "u",  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  "Z",  "z",  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
	},
	// Table 12
	{
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  "D",  "d",  "D",  "d",
		 "D",  "d",  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  "H",  "h",  ___,  ___,  "H",  "h",  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  "P",  "p",  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  "S",  "s",  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  "T",  "t",  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  "Z",  "z",  "h",  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
	},
	// Table 13
	{
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  "D",  "d",  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  "H",  "h",  ___,  ___,  "H",  "h",  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 "M",  "m",  "M",  "m",  "N",  "n",  "N",  "n",  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  "R",  "r",  ___,  ___,  ___,  ___,
		 ___,  ___,  "S",  "s",  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  "T",  "t",  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  "Y",  "y",
		 ___,  ___,  ___,  ___,  "Z",  "z",  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
	},
	// Table 14
	{
		 "A",  "a",  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  "C",  "c",  ___,  ___,
		 ___,  ___,  "E",  "e",  ___,  ___,  "E",  "e",  ___,  ___,  ___,  ___,  ___,  ___,  "G",  "g",
		 "G",  "g",  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  "I",  "i",  "I",  "i",  ___,  ___,
		 "I",  "i",  ___,  ___,  ___,  ___,  "K",  "k",  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  "O",  "o",  "O",  "o",
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  "S",  "s",
		 "S",  "s",  "T",  "t",  ___,  ___,  ___,  ___,  ___,  ___,  "U",  "u",  "U",  "u",  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  "z",  "Z",
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  "A",
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  "a",  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
	},
	// Table 15
	{
		 "A",  "a",  "A",  "a",  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  "C",  "c",  ___,  ___,
		 ___,  ___,  "E",  "e",  "E",  "e",  "E",  "e",  ___,  ___,  "E",  "e",  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  "I",  "i",  "I",  "i",  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  "N",  "n",  ___,  ___,  ___,  ___,  ___,  ___,  ___,  "O",  "o",  "O",  "o",
		 ___,  ___, "Oe", "oe",  ___,  ___,  ___,  ___,  ___,  ___,  "S",  "s",  ___,  ___,  "S",  "s",
		 "S",  "s",  "T",  "t",  ___,  ___,  ___,  ___,  ___,  ___,  "U",  "u",  "U",  "u",  ___,  ___,
		 ___,  ___,  ___,  ___,  "W",  "w",  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  "A",  "a",  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
	},
	// Table 16
	{
		 ___,  ___,  ___,  ___,   "",  ___,  ___,  ___,   "",  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,   "",  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,   "",  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
	},
	// Table 17
	{
		 ___,  ___,  ___,  ___,   "",  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,   "",  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,   "",  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
	},
	// Table 18
	{
		 ___,  ___,  ___,  ___,   "",  ___,   "",  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,   "",  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
	},
	// Table 19
	{
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  "I",  "i",
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
	},
	// Table 20
	{
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  "`",  "'",  ___,  "`",  ___, "\"",  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
	},
	// Table 21
	{
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  "`",  "'",  ___,  "`",  ___, "\"",  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
	},
	// Table 22
	{
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  "`",  "'",  ___,  ___,  ___, "\"",  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
	},
	// Table 23
	{
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___, "\"",  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
	},
	// Table 24
	{
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  "`",  "'",  ___,  "`",  ___, "\"",  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
	},
	// Table 25
	{
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  "a",  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  "'",  "`",
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
	},
	// Table 26
	{
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  "i",  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
	},
	// Table 27
	{
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  "S",  "s",  "T",  "t",  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
		 ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,  ___,
	},
#undef ___
};

static char const* const* NonDiacriticsLookup[6][33] =
{
#define T(N)	NonDiacriticsTables[N]
#define _____	nullptr
	// Region 1
	{
		T( 0), T(11), _____, _____, _____, _____, _____, _____, _____, _____, _____,
		_____, _____, _____, _____, _____, _____, _____, _____, _____, _____, _____,
		_____, _____, _____, _____, _____, _____, _____, _____, _____, _____, T(22),
	},
	// Region 2
	{
		T( 1), T( 8), T(27), _____, _____, _____, _____, _____, _____, _____, _____,
		_____, _____, _____, _____, _____, _____, _____, _____, _____, _____, _____,
		_____, _____, _____, _____, _____, _____, _____, _____, T(19), _____, T(23),
	},
	// Region 3
	{
		T( 2), T( 9), T(25), T(16), _____, _____, _____, _____, _____, _____, _____,
		_____, _____, _____, _____, _____, _____, _____, _____, _____, _____, _____,
		_____, _____, _____, _____, _____, _____, _____, _____, T(12), _____, T(20),
	},
	// Region 4
	{
		T( 3), T(14), T(25), T(17), T(26), _____, _____, _____, _____, _____, _____,
		_____, _____, _____, _____, _____, _____, _____, _____, _____, _____, _____,
		_____, _____, _____, _____, _____, _____, _____, _____, T(10), _____, T(21),
	},

	{
		T( 4), T(15), _____, T(18), _____, _____, _____, _____, _____, _____, _____,
		_____, _____, _____, _____, _____, _____, _____, _____, _____, _____, _____,
		_____, _____, _____, _____, _____, _____, _____, _____, T(13), _____, T(24),
	},

	{
		T( 5), T( 7), _____, _____, _____, _____, _____, _____, _____, _____, _____,
		_____, _____, _____, _____, _____, _____, _____, _____, _____, _____, _____,
		_____, _____, _____, _____, _____, _____, _____, _____, T( 6), _____, _____,
	},
#undef _____
#undef T
};


static bool
fitsRegion1(mstl::string const& s)
{
	//^(	[\x20-\x7e]|
	//		\xc2\xaa|
	//		\xc2\xb0|
	//		\xc2\xb7|
	//		\xc3[\x80-\x96]|
	//		\xc3[\x98-\xb6]|
	//		\xc3[\xb8-\xbf]|
	//		\xc4[\x8c-\x8d]|
	//		\xc4\x91|
	//		\xc5[\x8a-\x8b]|
	//		\xc5[\x90-\x93]|
	//		\xc5[\xa0-\xa1]|
	//		\xc5[\xa6-\xa7]|
	//		\xc5[\xb0-\xb1]|
	//		\xc5[\xbd-\xbe]|
	//		\xe2\x80[\x98-\x99]|
	//		\xe2\x80[\x9d
	//)*$/
	for (unsigned i = 0; i < s.size(); )
	{
		unsigned char c = s[i++];

		if (c < 0x20)
			return false;

		if (0x7e < c)
		{
			switch (c)
			{
				case 0xc2:
					switch (uint8_t(s[i++]))
					{
						case 0xaa:
						case 0xb0:
						case 0xb7: break;

						default: return false;
					}
					break;

				case 0xc3:
					c = s[i++];
					if (c < 0x80 || 0xbf < c)
						return false;
					if (c == 0x97 || c == 0xb7)
						return false;
					break;

				case 0xc4:
					c = s[i++];
					if (c != 0x8c && c != 0x8d && c != 0x91)
						return false;
					break;

				case 0xc5:
					switch (uint8_t(s[i++]))
					{
						case 0x8a ... 0x8b:
						case 0x90 ... 0x93:
						case 0xa0 ... 0xa1:
						case 0xa6 ... 0xa7:
						case 0xb0 ... 0xb1:
						case 0xbd ... 0xbe: break;

						default: return false;
					}
					break;

				case 0xe2:
					if (uint8_t(s[i++]) != 0x80)
						return false;
					switch (uint8_t(s[i++]))
					{
						case 0x98:
						case 0x99:
						case 0x9d: break;

						default: return false;
					}
					break;

				default:
					return false;
			}
		}
	}

	return true;
}


static bool
fitsRegion2(mstl::string const& s)
{
	//^(	[\x20-\x7e]|
	//		\xc2\xb0|
	//		\xc2\xb7|
	//		\xc3[\x81-\x84]|
	//		\xc3[\x87-\x89]|
	//		\xc3\x8b|
	//		\xc3[\x8d-\x90]|
	//		\xc3[\x93-\x96]|
	//		\xc3[\x9a-\x9d]|
	//		\xc3\x9f|
	//		\xc3[\xa1-\xa3]|
	//		\xc3\xa4|
	//		\xc3[\xa7-\xa9]|
	//		\xc3\xab|
	//		\xc3[\xad-\xaf]|
	//		\xc3[\xb3-\xb6]|
	//		\xc3[\xba-\xbd]|
	//		\xc4[\x80-\x87]|
	//		\xc4[\x8c-\x93]|
	//		\xc4[\x96-\x9b]|
	//		\xc4[\xa2-\xa3]|
	//		\xc4[\xaa-\xab]|
	//		\xc4[\xae-\xaf]|
	//		\xc4[\xb6-\xb7]|
	//		\xc4[\xb9-\xbe]|
	//		\xc5[\x81-\x88]|
	//		\xc5[\x90-\x91]|
	//		\xc5[\x94-\x95]|
	//		\xc5[\x98-\x9b]|
	//		\xc5[\x9e-\xa5]|
	//		\xc5[\xaa-\xb3]|
	//		\xc5[\xb9-\xbe]|
	//		\xc7[\x8d-\x8e]|
	//		\xc8[\x98-\x9b]|
	//		\xe1\xb8[\xae-\xaf]|
	//		\xe2\x80[\x98-\x99]|
	//		\xe2\x80\x9d
	//)*$/

//	char const* p = s.c_str();
//	while (p < s.end())
//	{
//		Tcl_UniChar ch;
//
//		if (static_cast<unsigned char>(*p) >= 0xc0)
//		{
//			p += Tcl_UtfToUniChar(p, &ch);
//			printf("%u ", ch);
//		}
//		else
//		{
//			printf("%u ", unsigned(*p++));
//		}
//	}
//	printf("\n");
	for (unsigned i = 0; i < s.size(); )
	{
		unsigned char c = s[i++];

		if (c < 0x20)
			return false;

		if (0x7e < c)
		{
			switch (c)
			{
				case 0xc2:
					switch (uint8_t(s[i++]))
					{
						case 0xb0:
						case 0xb7: break;

						default: return false;
					}
					break;

				case 0xc3:
					switch (uint8_t(s[i++]))
					{
						case 0x81 ... 0x84:
						case 0x87 ... 0x89:
						case 0x8b:
						case 0x8d ... 0x90:
						case 0x93 ... 0x96:
						case 0x9a ... 0x9d:
						case 0x9f:
						case 0xa1 ... 0xa3:
						case 0xa4:
						case 0xa7 ... 0xa9:
						case 0xab:
						case 0xad ... 0xaf:
						case 0xb3 ... 0xb6:
						case 0xba ... 0xbd: break;

						default: return false;
					}
					break;

				case 0xc4:
					switch (uint8_t(s[i++]))
					{
						case 0x80 ... 0x87:
						case 0x8c ... 0x93:
						case 0x96 ... 0x9b:
						case 0xa2 ... 0xa3:
						case 0xaa ... 0xab:
						case 0xae ... 0xaf:
						case 0xb6 ... 0xb7:
						case 0xb9 ... 0xbe: break;

						default: return false;
					}
					break;

				case 0xc5:
					switch (uint8_t(s[i++]))
					{
						case 0x81 ... 0x88:
						case 0x90 ... 0x91:
						case 0x94 ... 0x95:
						case 0x98 ... 0x9b:
						case 0x9e ... 0xa5:
						case 0xaa ... 0xb3:
						case 0xb9 ... 0xbe: break;

						default: return false;
					}
					break;

				case 0xc7:
					c = s[i++];
					if (c != 0x8d && c != 0x8e)
						return false;
					break;

				case 0xc8:
					c = s[i++];
					if (c < 0x98 || 0x9b < c)
						return false;
					break;

				case 0xe1:
					if (uint8_t(s[i++]) != 0xb8)
						return false;
					c = s[i++];
					if (c != 0xae && c != 0xaf)
						return false;
					break;

				case 0xe2:
					if (uint8_t(s[i++]) != 0x80)
						return false;
					switch (uint8_t(s[i++]))
					{
						case 0x98:
						case 0x99:
						case 0x9d: break;

						default: return false;
					}
					break;

				default:
					return false;
			}
		}
	}

	return true;
}


static bool
fitsRegion3(mstl::string const& s)
{
	//^(	[\x20-\x7e]|
	//		\xc2\xb0|
	//		\xc2\xb7|
	//		\xc3[\x80-\x84]|
	//		\xc3[\x87-\x8b]|
	//		\xc3[\x8d-\x8f]|
	//		\xc3[\x91-\x96]|
	//		\xc3[\x99-\x9c]|
	//		\xc3[\x9f-\xa4]|
	//		\xc3[\xa7-\xab]|
	//		\xc3[\xad-\xaf]|
	//		\xc3[\xb1-\xb6]|
	//		\xc3[\xb9-\xbc]|
	//		\xc4[\x80-\x81]|
	//		\xc4[\x8a-\x8b]|
	//		\xc4[\x92-\x93]|
	//		\xc4[\x98-\x99]|
	//		\xc4[\x9e-\xa1]|
	//		\xc4[\xa6-\xa7]|
	//		\xc4[\xaa-\xab]|
	//		\xc4[\xb0-\xb1]|
	//		\xc5[\x81-\x82]|
	//		\xc5[\x8d-\x8e]|
	//		\xc5[\x92-\x93]|
	//		\xc5[\x9a-\x9b]|
	//		\xc5[\x9e-\x9f]|
	//		\xc5[\xa0-\xa3]|
	//		\xc5[\xaa-\xab]|
	//		\xc5[\xb4-\xb5]|
	//		\xc5[\xbb-\xbc]|
	//		\xc7[\xa5-\xa6]|
	//		\xc9\x99|
	//		\xca[\xbe-\xbf]|
	//		\xcc\x84|
	//		\xcc\x88|
	//		\xcc\xa7|
	//		\xcc\xb1|
	//		\xe1\xb8[\x8c-\x91]|
	//		\xe1\xb8[\xa4-\xa5]|
	//		\xe1\xb8[\xa8-\xa9]|
	//		\xe1\xb9[\x96-\x97]||
	//		\xe1\xb9[\xa2-\xa3]|
	//		\xe1\xb9[\xac-\xad]|
	//		\xe1\xba[\x94-\x96]|
	//		\xe2\x80[\x98-\x99]|
	//		\xe2\x80\x9b|
	//		\xe2\x80\x9d
	//)*$/
	for (unsigned i = 0; i < s.size(); )
	{
		unsigned char c = s[i++];

		if (c < 0x20)
			return false;

		if (0x7e < c)
		{
			switch (c)
			{
				case 0xc2:
					c = s[i++];
					if (c != 0xb0 && c != 0xb7)
						return false;
					break;

				case 0xc3:
					switch (uint8_t(s[i++]))
					{
						case 0x80 ... 0x84:
						case 0x87 ... 0x8b:
						case 0x8d ... 0x8f:
						case 0x91 ... 0x96:
						case 0x99 ... 0x9c:
						case 0x9f ... 0xa4:
						case 0xa7 ... 0xab:
						case 0xad ... 0xaf:
						case 0xb1 ... 0xb6:
						case 0xb9 ... 0xbc: break;

						default: return false;
					}
					break;

				case 0xc4:
					switch (uint8_t(s[i++]))
					{
						case 0x80 ... 0x81:
						case 0x8a ... 0x8b:
						case 0x92 ... 0x93:
						case 0x98 ... 0x99:
						case 0x9e ... 0xa1:
						case 0xa6 ... 0xa7:
						case 0xaa ... 0xab:
						case 0xb0 ... 0xb1: break;

						default: return false;
					}
					break;

				case 0xc5:
					switch (uint8_t(s[i++]))
					{
						case 0x81 ... 0x82:
						case 0x8d ... 0x8e:
						case 0x92 ... 0x93:
						case 0x9a ... 0x9b:
						case 0x9e ... 0x9f:
						case 0xa0 ... 0xa3:
						case 0xaa ... 0xab:
						case 0xb4 ... 0xb5:
						case 0xbb ... 0xbc: break;

						default: return false;
					}
					break;

				case 0xc7:
					switch (uint8_t(s[i++]))
					{
						case 0xa5 ... 0xa6: break;

						default: return false;
					}
					break;

				case 0xc9:
					if (uint8_t(s[i++]) != 0x99)
						return false;
					break;

				case 0xca:
					switch (uint8_t(s[i++]))
					{
						case 0xbe ... 0xbf: break;

						default: return false;
					}
					break;

				case 0xcc:
					switch (uint8_t(s[i++]))
					{
						case 0x84:
						case 0x88:
						case 0xa7:
						case 0xb1: break;

						default: return false;
					}
					break;

				case 0xe1:
					switch (uint8_t(s[i++]))
					{
						case 0xb8:
							switch (uint8_t(s[i++]))
							{
								case 0x8c ... 0x91:
								case 0xa4 ... 0xa5:
								case 0xa8 ... 0xa9: break;

								default: return false;
							}
							break;

						case 0xb9:
							switch (uint8_t(s[i++]))
							{
								case 0x96 ... 0x97:
								case 0xa2 ... 0xa3:
								case 0xac ... 0xad: break;

								default: return false;
							}
							break;

						case 0xba:
							switch (uint8_t(s[i++]))
							{
								case 0x94 ... 0x96: break;
								default: return false;
							}
							break;

						default:
							return false;
					}
					break;

				case 0xe2:
					if (uint8_t(s[i++]) != 0x80)
						return false;
					switch (uint8_t(s[i++]))
					{
						case 0x98:
						case 0x99:
						case 0x9b:
						case 0x9d: break;

						default: return false;
					}
					break;

				default:
					return false;
			}
		}
	}

	return true;
}


static bool
fitsRegion4(mstl::string const& s)
{
	//^(	[\x20-\x7e]|
	//		\xc2\xb0|
	//		\xc2\xb7|
	//		\xc3[\x81-\x82]|
	//		\xc3\x84|
	//		\xc3\x87|
	//		\xc3[\x8a-\x8b]|
	//		\xc3[\x8e-\x8f]|
	//		\xc3\x94|
	//		\xc3\x96|
	//		\xc3[\x9b-\x9d]|
	//		\xc3\x9f|
	//		\xc3[\xa1-\xa2]|
	//		\xc3\xa4|
	//		\xc3\xa7|
	//		\xc3[\xaa-\xab]|
	//		\xc3[\xae-\xaf]|
	//		\xc3\xb4|
	//		\xc3\xb6|
	//		\xc3[\xbb-\xbd]|
	//		\xc4[\x80-\x81]|
	//		\xc4[\x8c-\x8d]|
	//		\xc4[\x92-\x93]|
	//		\xc4[\x96-\x97]|
	//		\xc4[\x9e-\x9f]|
	//		\xc4[\xa0-\xa1]|
	//		\xc4[\xaa-\xad]|
	//		\xc4[\xb0-\xb1]|
	//		\xc4[\xb6-\xb7]|
	//		\xc5[\x8c-\x8f]|
	//		\xc5[\x9e-\x9f]|
	//		\xc5[\xa1-\xa3]|
	//		\xc5[\xaa-\xad]|
	//		\xc5[\xbd-\xbe]|
	//		\xc6\x8f|
	//		\xc7\x9d|
	//		\xc9\x99|
	//		\xca[\xbe-\xbf]|
	//		\xcc\x84|
	//		\xcc\xa7|
	//		\xcc\xb2|
	//		\xd1\x97|
	//		\xe1\xb8[\x8c-\x91]|
	//		\xe1\xb8[\xa4-\xa5]|
	//		\xe1\xb8[\xa8-\xa9]|
	//		\xe1\xb9[\x88-\x89]|
	//		\xe1\xb9[\x9e-\x9f]|
	//		\xe1\xb9[\xa2-\xa3]|
	//		\xe1\xb9[\xac-\xaf]|
	//		\xe1\xba[\x94-\x95]|
	//		\xe2\x80[\x98-\x99]|
	//		\xe2\x80\x9b|
	//		\xe2\x80\x9d
	//)*$/
	for (unsigned i = 0; i < s.size(); )
	{
		unsigned char c = s[i++];

		if (c < 0x20)
			return false;

		if (0x7e < c)
		{
			switch (c)
			{
				case 0xc2:
					c = s[i++];
					if (c != 0xb0 && c != 0xb7)
						return false;
					break;

				case 0xc3:
					switch (uint8_t(s[i++]))
					{
						case 0x81 ... 0x82:
						case 0x84:
						case 0x87:
						case 0x8a ... 0x8b:
						case 0x8e ... 0x8f:
						case 0x94:
						case 0x96:
						case 0x9b ... 0x9d:
						case 0x9f:
						case 0xa1 ... 0xa2:
						case 0xa4:
						case 0xa7:
						case 0xaa ... 0xab:
						case 0xae ... 0xaf:
						case 0xb4:
						case 0xb6:
						case 0xbb ... 0xbd: break;

						default: return false;
					}
					break;

				case 0xc4:
					switch (uint8_t(s[i++]))
					{
						case 0x80 ... 0x81:
						case 0x8c ... 0x8d:
						case 0x92 ... 0x93:
						case 0x96 ... 0x97:
						case 0x9e ... 0x9f:
						case 0xa0 ... 0xa1:
						case 0xaa ... 0xad:
						case 0xb0 ... 0xb1:
						case 0xb6 ... 0xb7: break;

						default: return false;
					}
					break;

				case 0xc5:
					switch (uint8_t(s[i++]))
					{
						case 0x8c ... 0x8f:
						case 0x9e ... 0x9f:
						case 0xa1 ... 0xa3:
						case 0xaa ... 0xad:
						case 0xbd ... 0xbe: break;

						default: return false;
					}
					break;

				case 0xc6:
					if (uint8_t(s[i++]) != 0x8f)
						return false;
					break;

				case 0xc7:
					if (uint8_t(s[i++]) != 0x9d)
						return false;
					break;

				case 0xc9:
					if (uint8_t(s[i++]) != 0x99)
						return false;
					break;

				case 0xca:
					switch (uint8_t(s[i++]))
					{
						case 0xbe ... 0xbf: break;

						default: return false;
					}
					break;

				case 0xcc:
					switch (uint8_t(s[i++]))
					{
						case 0x84:
						case 0xa7:
						case 0xb2: break;

						default: return false;
					}
					break;

				case 0xd1:
					if (uint8_t(s[i++]) != 0x97)
						return false;
					break;

				case 0xe1:
					switch (uint8_t(s[i++]))
					{
						case 0xb8:
							switch (uint8_t(s[i++]))
							{
								case 0x8c ... 0x91:
								case 0xa4 ... 0xa5:
								case 0xa8 ... 0xa9: break;

								default: return false;
							}
							break;

						case 0xb9:
							switch (uint8_t(s[i++]))
							{
								case 0x88 ... 0x89:
								case 0x9e ... 0x9f:
								case 0xa2 ... 0xa3:
								case 0xac ... 0xaf: break;

								default: return false;
							}
							break;

						case 0xba:
							c = s[i++];
							if (c != 0x94 && c != 0x95)
								return false;
							break;

						default: return false;
					}
					break;

				case 0xe2:
					if (uint8_t(s[i++]) != 0x80)
						return false;
					switch (uint8_t(s[i++]))
					{
						case 0x98:
						case 0x99:
						case 0x9b:
						case 0x9d: break;

						default: return false;
					}
					break;

				default:
					return false;
			}
		}
	}

	return true;
}


static bool
fitsRegion5(mstl::string const& s)
{
	//^(	[\x20-\x7e]|
	//		\xc2\xb0|
	//		\xc2\xb7|
	//		\xc3[\x80-\x84]|
	//		\xc3[\x87-\x8b]|
	//		\xc3[\x8d-\x8f]|
	//		\xc3[\x91-\x96]|
	//		\xc3[\x99-\x9c]|
	//		\xc3[\x9f-\xa4]|
	//		\xc3[\xa7-\xab]|
	//		\xc3[\xad-\xaf]|
	//		\xc3[\xb1-\xb6]|
	//		\xc3[\xb9-\xbc]|
	//		\xc4[\x80-\x83]|
	//		\xc4[\x8c-\x8d]|
	//		\xc4[\x92-\x97]|
	//		\xc4[\x9a-\x9b]|
	//		\xc4[\xaa-\xad]|
	//		\xc5[\x83-\x84]|
	//		\xc5[\x8c-\x8f]|
	//		\xc5[\x92-\x93]|
	//		\xc5[\x9a-\x9b]|
	//		\xc5[\x9e-\x9f]|
	//		\xc5[\xa0-\xa3]|
	//		\xc5[\xaa-\xad]|
	//		\xc5[\xb4-\xb5]|
	//		\xc7[\x8d-\x8e]|
	//		\xcc\x84|
	//		\xcc\x86|
	//		\xcc\xa7|
	//		\xe1\xb8[\x8c-\x8d]|
	//		\xe1\xb8[\xa4-\xa5]|
	//		\xe1\xb8[\xa8-\xa9]|
	//		\xe1\xb9[\x80-\x83]|
	//		\xe1\xb9[\x84-\x87]|
	//		\xe1\xb9[\xa2-\xa3]|
	//		\xe1\xb9[\x9a-\x9b]|
	//		\xe1\xb9[\xac-\xad]|
	//		\xe1\xba[\x8e-\x8f]|
	//		\xe1\xba[\x94-\x95]|
	//		\xe2\x80[\x98-\x99]|
	//		\xe2\x80\x9b|
	//		\xe2\x80\x9d
	//)*$/
	for (unsigned i = 0; i < s.size(); )
	{
		unsigned char c = s[i++];

		if (c < 0x20)
			return false;

		if (0x7e < c)
		{
			switch (c)
			{
				case 0xc2:
					c = s[i++];
					if (c != 0xb0 && c != 0xb7)
						return false;
					break;

				case 0xc3:
					switch (uint8_t(s[i++]))
					{
						case 0x80 ... 0x84:
						case 0x87 ... 0x8b:
						case 0x8d ... 0x8f:
						case 0x91 ... 0x96:
						case 0x99 ... 0x9c:
						case 0x9f ... 0xa4:
						case 0xa7 ... 0xab:
						case 0xad ... 0xaf:
						case 0xb1 ... 0xb6:
						case 0xb9 ... 0xbc: break;

						default: return false;
					}
					break;

				case 0xc4:
					switch (uint8_t(s[i++]))
					{
						case 0x80 ... 0x83:
						case 0x8c ... 0x8d:
						case 0x92 ... 0x97:
						case 0x9a ... 0x9b:
						case 0xaa ... 0xad: break;

						default: return false;
					}
					break;

				case 0xc5:
					switch (uint8_t(s[i++]))
					{
						case 0x83 ... 0x84:
						case 0x8c ... 0x8f:
						case 0x92 ... 0x93:
						case 0x9a ... 0x9b:
						case 0x9e ... 0x9f:
						case 0xa0 ... 0xa3:
						case 0xaa ... 0xad:
						case 0xb4 ... 0xb5: break;

						default: return false;
					}
					break;

				case 0xc7:
					switch (uint8_t(s[i++]))
					{
						case 0x8d:
						case 0x8e: break;

						default: return false;
					}
					break;


				case 0xcc:
					switch (uint8_t(s[i++]))
					{
						case 0x84:
						case 0x86:
						case 0xa7: break;

						default: return false;
					}
					break;

				case 0xe1:
					switch (uint8_t(s[i++]))
					{
						case 0xb8:
							switch (uint8_t(s[i++]))
							{
								case 0x8c ... 0x8d:
								case 0xa4 ... 0xa5:
								case 0xa8 ... 0xa9: break;

								default: return false;
							}
							break;

						case 0xb9:
							switch (uint8_t(s[i++]))
							{
								case 0x80 ... 0x83:
								case 0x84 ... 0x87:
								case 0xa2 ... 0xa3:
								case 0x9a ... 0x9b:
								case 0xac ... 0xad: break;

								default: return false;
							}
							break;

						case 0xba:
							switch (uint8_t(s[i++]))
							{
								case 0x8e ... 0x8f:
								case 0x94 ... 0x95: break;

								default: return false;
							}
							break;

						default:
							return false;
					}
					break;

				case 0xe2:
					if (uint8_t(s[i++]) != 0x80)
						return false;
					switch (uint8_t(s[i++]))
					{
						case 0x98:
						case 0x99:
						case 0x9b:
						case 0x9d: break;

						default: return false;
					}
					break;

				default:
					return false;
			}
		}
	}

	return true;
}


static bool
fitsRegion6(mstl::string const& s)
{
	//^(	[\x20-\x7e]|
	//		\xc2\xb0|
	//		\xc3[\x80-\x83]|
	//		\xc3[\x87-\x8a]|
	//		\xc3[\x8c-\x8e]|
	//		\xc3\x90|
	//		\xc3[\x92-\x95]|
	//		\xc3[\x99-\x9b]|
	//		\xc3\x9d|
	//		\xc3[\xa0-\xa3]|
	//		\xc3[\xa7-\xaf]|
	//		\xc3[\xb2-\xb5]|
	//		\xc3[\xb9-\xbb]|
	//		\xc3\xbd|
	//		\xc4[\x82-\x83]|
	//		\xc4\x91|
	//		\xc4[\xa8-\xa9]|
	//		\xc5[\x92-\x93]|
	//		\xc5[\xa8-\xa9]|
	//		\xc6[\xa0-\xa1]|
	//		\xc6[\xaf-\xb0]|
	//		\xe1\xba[\xa0-\xbf]|
	//		\xe1\xbb[\x80-\xb9]
	//)*$/
	for (unsigned i = 0; i < s.size(); )
	{
		unsigned char c = s[i++];

		if (c < 0x20)
			return false;

		if (0x7e < c)
		{
			switch (c)
			{
				case 0xc2:
					c = s[i++];
					if (c != 0xb0)
						return false;
					break;

				case 0xc3:
					switch (uint8_t(s[i++]))
					{
						case 0x80 ... 0x83:
						case 0x87 ... 0x8a:
						case 0x8c ... 0x8e:
						case 0x90:
						case 0x92 ... 0x95:
						case 0x99 ... 0x9b:
						case 0x9d:
						case 0xa0 ... 0xa3:
						case 0xa7 ... 0xaf:
						case 0xb2 ... 0xb5:
						case 0xb9 ... 0xbb:
						case 0xbd:				break;

						default: return false;
					}
					break;

				case 0xc4:
					switch (uint8_t(s[i++]))
					{
						case 0x82 ... 0x83:
						case 0x91:
						case 0xa8 ... 0xa9: break;

						default: return false;
					}
					break;

				case 0xc5:
					switch (uint8_t(s[i++]))
					{
						case 0x92 ... 0x93:
						case 0xa8 ... 0xa9: break;

						default: return false;
					}
					break;

				case 0xc6:
					switch (uint8_t(s[i++]))
					{
						case 0xa0 ... 0xa1:
						case 0xaf ... 0xb0: break;

						default: return false;
					}
					break;

				case 0xe1:
					switch (uint8_t(s[i++]))
					{
						case 0xba:
							c = s[i++];
							if (c < 0xa0 || 0xbf < c)
								return false;
							break;

						case 0xbb:
							c = s[i++];
							if (c < 0x80 || 0xb9 < c)
								return false;
							break;

						default: return false;
					}
					break;

				default:
					return false;
			}
		}
	}

	return true;
}


static
char const*
findConversion(sys::utf8::uchar code)
{
	switch (code)
	{
		// Annotation symbols
		case 0x00ab: return "<<";   // Queenside
		case 0x00b1: return "+/-";  // White has a moderate advantage
		case 0x00bb: return ">>";   // Kingside
		case 0x01c1: return "&c";   // Etc
		case 0x2014: return "--";   // See
		case 0x203c: return "!!";   // Very good move
		case 0x2047: return "??";   // Very poor move
		case 0x2048: return "?!";   // Questionable move
		case 0x2049: return "!?";   // Interesting move
		case 0x20e4: return "/\\";  // With the idea
		case 0x2190: return "<-";   // Black has the attack
		case 0x2191: return "|^";   // White has the initiative
		case 0x2192: return "->";   // White has the attack
		case 0x2193: return "|v";   // Black has the initiative
		case 0x21b9: return "=&";   // Equal chances, active position
		case 0x21bb: return "@";    // Development
		case 0x21c6: return "<=>";  // Counterplay
		case 0x21d1: return "||^";  // White has a lasting initiative
		case 0x21d4: return "<->";  // Line
		case 0x21d7: return "/^";   // Diagonal
		case 0x2206: return "/\\";  // With the idea
		case 0x2213: return "-/+";  // Black has a moderate advantage
		case 0x221e: return "~~";   // Unclear position
		case 0x2228: return "\\/";  // Aimed against
		case 0x223c: return "~";    // With compensation
		case 0x2264: return "<=";   // Worse is
		case 0x226a: return "<<";   // Queenside
		case 0x226b: return ">>";   // Kingside
		case 0x227b: return ">";    // More pawns
		case 0x2295: return "(+)";  // Zeitnot
		case 0x2299: return "(.)";  // Zugzwang
		case 0x229e: return "[+]";  // Center
		case 0x22a5: return "_|_";  // Endgame
		case 0x22b6: return "^=";   // Bishops of same color
		case 0x22c1: return "\\/";  // Aimed against
		case 0x22d8: return "<<<";  // Black has a moderate kingside advantage
		case 0x22d9: return ">>>";  // White has a moderate kingside advantage
		case 0x230a: return "|_";   // With
		case 0x230b: return "_|";   // Without
		case 0x2313: return ">=";   // Better move
		case 0x259e: return "^=";   // Bishops of same color
		case 0x25a0: return "[]";   // Forced move
		case 0x25a1: return "[]";   // Singular move
		case 0x25b3: return "/\\";  // With the idea
		case 0x25dd: return "()";   // Space
		case 0x25e8: return "^_";   // Bishops of opposite color
		case 0x25eb: return "^^";   // Pair of bishops
		case 0x25ef: return "()";   // Space
		case 0x26a8: return "o^";   // Passed pawn
		case 0x26ae: return "o.o";  // Connected pawns
		case 0x26af: return "o/o";  // Isolated pawns
		case 0x2715: return "><";   // Weak point
		case 0x27e9: return ">";    // More pawns
		case 0x27ea: return "<<";   // Queenside
		case 0x27eb: return ">>";   // Kingside
		case 0x27fa: return "<->";  // Line
		case 0x2a71: return "=/+";  // Black has a slight advantage
		case 0x2a72: return "+/=";  // White has a slight advantage
		case 0x2b12: return "#";    // Diagram
		case 0x2b13: return "#";    // Diagram from black's perspective
		case 0x3007: return "()";   // Space
		case 0x300a: return "<<";   // Queenside
		case 0x300b: return ">>";   // Kingside

		// Some commonly used code points
		case 0x2002: return " ";    // EN SPACE
		case 0x2003: return " ";    // EM SPACE
		case 0x2004: return " ";    // THREE-PER-EM SPACE
		case 0x2005: return " ";    // FOUR-PER-EM SPACE
		case 0x2006: return " ";    // SIX-PER-EM SPACE
		case 0x2007: return " ";    // FIGURE SPACE
		case 0x2008: return " ";    // PUNCTUATION SPACE
		case 0x2009: return " ";    // THIN SPACE
		case 0x2010: return "-";    // HYPHEN
		case 0x2011: return "-";    // NON-BREAKING HYPHEN
		case 0x2012: return "--";   // FIGURE DASH
		case 0x2013: return "-";    // EN DASH
		case 0x2015: return "-";    // HORIZONTAL BAR
		case 0x2018: return "'";    // LEFT SINGLE QUOTATION MARK
		case 0x2019: return "'";    // RIGHT SINGLE QUOTATION MARK
		case 0x201a: return "'";    // SINGLE LOW-9 QUOTATION MARK
		case 0x201b: return "'";    // SINGLE HIGH-REVERSED-9 QUOTATION MARK
		case 0x201c: return "\"";   // LEFT DOUBLE QUOTATION MARK
		case 0x201d: return "\"";   // RIGHT DOUBLE QUOTATION MARK
		case 0x201e: return "\"";   // DOUBLE LOW-9 QUOTATION MARK
		case 0x201f: return "\"";   // DOUBLE HIGH-REVERSED-9 QUOTATION MARK
		case 0x2022: return "-";    // BULLET
		case 0x2026: return "...";  // HORIZONTAL ELLIPSIs
		case 0x20ac: return "Euro"; // EURO SIGN
		case 0x2122: return "TM";   // TRADE MARK SIGN
		case 0x2139: return "(i)";  // INFORMATION SOURCE
		case 0x2212: return "-";    // MINUS SIGN
		case 0x25cf: return "(*)";  // BLACK CIRCLE
		case 0x2605: return "*";    // BLACK STAR
		case 0x2654: return "K";    // WHITE CHESS KING
		case 0x2655: return "Q";    // WHITE CHESS QUEEN
		case 0x2656: return "R";    // WHITE CHESS ROOK
		case 0x2657: return "B";    // WHITE CHESS BISHOP
		case 0x2658: return "N";    // WHITE CHESS KNIGHT
		case 0x2659: return "P";    // WHITE CHESS PAWN
		case 0x265a: return "k";    // BLACK CHESS KING
		case 0x265b: return "q";    // BLACK CHESS QUEEN
		case 0x265c: return "r";    // BLACK CHESS ROOK
		case 0x265d: return "b";    // BLACK CHESS BISHOP
		case 0x265e: return "n";    // BLACK CHESS KNIGHT
		case 0x265f: return "p";    // BLACK CHESS PAWN
		case 0x270e: return "**";   // LOWER RIGHT PENCIl
		case 0xfffd: return "?";    // REPLACEMENT CHARACTER

		// some additional characters in extended ASCII / CP1252
		case 0x0152: return "OE";   // LATIN CAPITAL LIGATURE OE
		case 0x0153: return "oe";   // LATIN SMALL LIGATURE OE
		case 0x0160: return "S";    // LATIN CAPITAL LETTER S WITH CARON
		case 0x0161: return "s";    // LATIN SMALL LETTER S WITH CARON
		case 0x0178: return "Y";    // LATIN CAPITAL LETTER Y WITH DIAERESIS
		case 0x017d: return "Z";    // LATIN CAPITAL LETTER Z WITH CARON
		case 0x017e: return "z";    // LATIN SMALL LETTER Z WITH CARON
		case 0x0192: return "f";    // LATIN SMALL LETTER F WITH HOOK
		case 0x02dc: return "~";    // SMALL TILDE
		case 0x2017: return "_";    // DOUBLE LOW LINE
		case 0x2020: return "+";    // DAGGER
		case 0x2021: return "++";   // DOUBLE DAGGER
		case 0x2039: return "<";    // SINGLE LEFT-POINTING ANGLE QUOTATION MARK
		case 0x203a: return ">";    // SINGLE RIGHT-POINTING ANGLE QUOTATION MARK
		case 0x02c6: return "^";    // MODIFIER LETTER CIRCUMFLEX ACCENT
		case 0x2030: return "0/00"; // PER MILLE SIGN
		case 0x2261: return "=";    // IDENTICAL TO
	}

	return nullptr;
}


static int
compareEncodings(void const* lhs, void const* rhs)
{
	return ::strcmp(	Tcl_GetString(*static_cast<Tcl_Obj*const*>(lhs)),
							Tcl_GetString(*static_cast<Tcl_Obj*const*>(rhs)));
}


inline static int
utfToUniChar(char const* s, Tcl_UniChar& ch)
{
	if (static_cast<unsigned char>(*s) >= 0xc0)
		return Tcl_UtfToUniChar(s, &ch);

	ch = *s;
	return 1;
}


inline static bool
isSpace(char c)
{
	return c == '-' || c == '_' || c == '.' || ::isspace(c);
}


Codec::Codec(mstl::string const& encoding)
	:m_codec(Tcl_GetEncoding(::sys::tcl::interp(), encoding))
	,m_buf(4095, ' ')
	,m_encoding(encoding)
	,m_unknown(0)
	,m_error(false)
	,m_type(Other)
{
	setupType();
}


Codec::~Codec()
{
	if (m_codec)
		Tcl_FreeEncoding(m_codec);
}


void
Codec::setupType()
{
	if (m_encoding == utf8())
		m_type = UTF8;
	else if (m_encoding == windows())
		m_type = Windows;
	else if (m_encoding == dos())
		m_type = DOS;
	else
		m_type = Other;
}


void
Codec::reset(mstl::string const& encoding)
{
	if (m_codec)
		Tcl_FreeEncoding(m_codec);

	m_codec = Tcl_GetEncoding(::sys::tcl::interp(), encoding);
	m_encoding = encoding;
	m_error = false;
	m_unknown = 0;
	setupType();
}


void
Codec::convertFromDOS(mstl::string const& in, mstl::string& out)
{
	char const* str	= in.begin();
	char const* e		= in.end();

	mstl::string  buf;
	mstl::string* result;

	if (in.c_str() == out.c_str())
	{
		result = &buf;
		buf.reserve(out.capacity());
	}
	else
	{
		result = &out;
	}

	for ( ; str < e; ++str)
	{
		unsigned char c = *str;

		if (c & 0x80)
		{
			static unsigned const CodeTable[128] =
			{
				0x00c7, 0x00fc, 0x00e9, 0x00e2, 0x00e4, 0x00e0, 0x00e5, 0x00e7, // 80 ... 87
				0x00ea, 0x00eb, 0x00e8, 0x00ef, 0x00ee, 0x00ec, 0x00c4, 0x00c5, // 88 ... 8f
				0x00c9, 0x00e6, 0x00c6, 0x00f4, 0x00f6, 0x00f2, 0x00fb, 0x00f9, // 90 ... 97
				0x00ff, 0x00d6, 0x00dc, 0x00f8, 0x00a3, 0x00d8, 0x00d7, 0x0192, // 98 ... 9f
				0x00e1, 0x00ed, 0x00f3, 0x00fa, 0x00f1, 0x00d1, 0x00aa, 0x00ba, // a0 ... a7
				0x00bf, 0x00ae, 0x00ac, 0x00bd, 0x00bc, 0x00a1, 0x00ab, 0x00bb, // a8 ... af
				0x2591, 0x2592, 0x2593, 0x2502, 0x2524, 0x00c1, 0x00c2, 0x00c0, // b0 ... b7
				0x00a9, 0x2563, 0x2551, 0x2557, 0x255d, 0x00a2, 0x00a5, 0x2510, // b8 ... bf
				0x2514, 0x2534, 0x252c, 0x251c, 0x2500, 0x253c, 0x00e3, 0x00c3, // c0 ... c7
				0x255a, 0x2554, 0x2569, 0x2566, 0x2560, 0x2550, 0x256c, 0x00a4, // c8 ... cf
				0x00f0, 0x00d0, 0x00ca, 0x00cb, 0x00c8, 0x0131, 0x00cd, 0x00ce, // d0 ... d7
				0x00cf, 0x2518, 0x250c, 0x2588, 0x2584, 0x00a6, 0x00cc, 0x2580, // d8 ... df
				0x00d3, 0x00df, 0x00d4, 0x00d2, 0x00f5, 0x00d5, 0x00b5, 0x00fe, // e0 ... e7
				0x00de, 0x00da, 0x00db, 0x00d9, 0x00fd, 0x00dd, 0x00af, 0x00b4, // e8 ... ef
				0x2261, 0x00b1, 0x2017, 0x00be, 0x00b6, 0x00a7, 0x00f7, 0x00b8, // f0 ... f7
				0x00b0, 0x00a8, 0x00b7, 0x00b9, 0x00b3, 0x00b2, 0x25a0, 0x00a0, // f8 ... ff
			};

			utf8::append(*result, CodeTable[c - 0x80]);
		}
		else
		{
			result->append(c);
		}
	}

	if (&in == &out)
		out.assign(buf);
}


void
Codec::convertFromWindows(mstl::string const& in, mstl::string& out)
{
	char const* str	= in.begin();
	char const* e		= in.end();

	mstl::string  buf;
	mstl::string* result;

	if (in.c_str() == out.c_str())
	{
		result = &buf;
		buf.reserve(out.capacity());
	}
	else
	{
		result = &out;
	}

	for ( ; str < e; ++str)
	{
		unsigned char c = *str;

		if (c & 0x80)
		{
			if (c < 0xa8) // otherwise it's identical to Latin-1
			{
				static unsigned const CodeTable[128] =
				{
					0x20ac, 0xfffd, 0x201a, 0x0192, 0x201e, 0x2026, 0x2020, 0x2021, // 80 ... 87
					0x02c6, 0x2030, 0x0160, 0x2039, 0x0152, 0xfffd, 0x017d, 0xfffd, // 88 ... 8f
					0xfffd, 0x2018, 0x2019, 0x201c, 0x201d, 0x2022, 0x2013, 0x2014, // 90 ... 97
					0x02dc, 0x2122, 0x0161, 0x203a, 0x0153, 0xfffd, 0x017e, 0x0178, // 98 ... 9f
					0x02a0, 0x00a1, 0x2654, 0x2655, 0x2658, 0x2657, 0x2656, 0x2659, // a0 ... a7
				};

				c = CodeTable[c - 0x80];
			}

			utf8::append(*result, c);
		}
		else
		{
			result->append(c);
		}
	}

	if (&in == &out)
		out.assign(buf);
}


bool
Codec::convertFromUtf8(mstl::string const& in, mstl::string& out)
{
	M_REQUIRE(hasEncoding());
	M_REQUIRE(sys::utf8::validate(in));

	if (m_type == UTF8)
	{
		out = in;
		return true;
	}

	Tcl_EncodingState state;

	char const*	src = in.c_str();
	char*			dst = m_buf.data();

	int flags	= TCL_ENCODING_START | TCL_ENCODING_END | TCL_ENCODING_STOPONERROR;
	int srcLen	= in.size();
	int dstLen	= m_buf.size();

	out.clear();

	while (true)
	{
		int bytesIn, bytesOut, dstChars;

		int rc = Tcl_UtfToExternal(0,
											m_codec,
											src, srcLen,
											flags,
											&state,
											dst, dstLen,
											&bytesIn,
											&bytesOut,
											&dstChars);

		out.append(m_buf.c_str(), dst + bytesOut - m_buf.c_str());

		if (rc == TCL_OK)
			return true;

		src += bytesIn;
		srcLen -= bytesIn;

		switch (rc)
		{
			case TCL_CONVERT_NOSPACE:
				flags &= ~TCL_ENCODING_START;
				break;

			case TCL_CONVERT_UNKNOWN:
				flags |= TCL_ENCODING_START;

				if (static_cast<unsigned char>(*src) & 0x80)
				{
					unsigned		charLen;
					utf8::uchar	code(utf8::getChar(src, charLen));

					if (char const* conversion = ::findConversion(code))
					{
						out.append(conversion);
					}
					else
					{
						out.append("?", 1);
						m_unknown += 1;
					}

					src += charLen;
					srcLen -= charLen;
				}
				else // this should never happen
				{
					out.append(src, 1); // this is ASCII
				}

				break;

			case TCL_CONVERT_SYNTAX:
				flags &= ~TCL_ENCODING_STOPONERROR;
				m_error = true;
				out.append("?", 1);
				flags |= TCL_ENCODING_START;
				src += 1;
				srcLen -= 1;
				for (char const* e = src + srcLen; src < e && !utf8::isFirst(*src); ++src)
					srcLen -= 1;
				break;

			case TCL_CONVERT_MULTIBYTE:
				out.append("?", 1);
				m_error = true;
				return false;
		}
	}

	return false;	// not reached
}


bool
Codec::convertToUtf8(mstl::string const& in, mstl::string& out)
{
	M_REQUIRE(hasEncoding());

	static mstl::string const Replacement("\xef\xbf\xbd", 3);

	if (m_type)
	{
		static_assert(Other == 0, "unexpected enum value");

		switch (m_type)
		{
			case Other:		break; // cannot happen
			case UTF8:		out = in; break;
			case DOS:		convertFromDOS(in, out); break;
			case Windows:	convertFromWindows(in, out); break;
		}

		return true;
	}

	Tcl_EncodingState state;
	mstl::string buffer;
	char const*	src = in.c_str();

	if (&in == &out)
	{
		buffer.assign(in);
		src = buffer.c_str();
	}

	char* dst = m_buf.data();

	int flags	= TCL_ENCODING_START | TCL_ENCODING_END | TCL_ENCODING_STOPONERROR;
	int srcLen	= in.size();
	int dstLen	= m_buf.size();

	out.clear();

	while (true)
	{
		int bytesIn, bytesOut, dstChars;

		int rc = Tcl_ExternalToUtf(0,
											m_codec,
											src, srcLen,
											flags,
											&state,
											dst, dstLen,
											&bytesIn,
											&bytesOut,
											&dstChars);

		int soFar = (dst + bytesOut) - m_buf.c_str();

		if (rc == TCL_OK)
		{
			out.assign(m_buf, soFar);

			// NOTE: sometimes Tcl_ExternalToUtf() is producing overlong UTF-8 sequences!
			if (!sys::utf8::validate(m_buf, soFar))
			{
				forceValidUtf8(out, Replacement);
				return false;
			}

			return true;
		}

		out.append(m_buf.c_str(), soFar);

		src += bytesIn;
		srcLen -= bytesIn;

		switch (rc)
		{
			case TCL_CONVERT_NOSPACE:
				flags &= ~TCL_ENCODING_START;
				break;

			case TCL_CONVERT_UNKNOWN:
			case TCL_CONVERT_SYNTAX:
				if (bytesOut > 0 || src == in.c_str())
				{
					out.append(Replacement);
					if (rc == TCL_CONVERT_UNKNOWN)
						m_unknown += 1;
					else
						m_error = true;
				}
				src += 1;
				srcLen -= 1;
				flags |= TCL_ENCODING_START;
				break;

			case TCL_CONVERT_MULTIBYTE:
				out.append(Replacement);
				m_error = true;
				return false;
		}
	}

	return false;	// not reached
}


bool
Codec::fromUtf8(mstl::string const& in, mstl::string& out)
{
	M_REQUIRE(hasEncoding());

	if (m_type != UTF8 && !in.is_7bit())
		return convertFromUtf8(in, out);

	out = in;
	return true;
}


bool
Codec::toUtf8(mstl::string const& in, mstl::string& out)
{
	M_REQUIRE(hasEncoding());

	if (m_type != UTF8 && !in.is_7bit())
		return convertToUtf8(in, out);

	out = in;
	return true;
}


mstl::string const&
Codec::latin1()
{
	static mstl::string const Name("iso8859-1");
	return Name;
}


mstl::string const&
Codec::utf8()
{
	static mstl::string const Name("utf-8");
	return Name;
}


mstl::string const&
Codec::windows()
{
	static mstl::string const Name("cp1252");
	return Name;
}


mstl::string const&
Codec::dos()
{
	static mstl::string const Name("cp850");
	return Name;
}


mstl::string const&
Codec::ascii()
{
	static mstl::string const Name("ascii");
	return Name;
}


mstl::string const&
Codec::automatic()
{
	static mstl::string const Name("auto");
	return Name;
}


unsigned
Codec::firstCharToUpper(mstl::string& name)
{
	M_REQUIRE(sys::utf8::validate(name));
	M_REQUIRE(name.writable());

	// IMPORTANT NOTE:
	// At this time, the case conversions are only defined for the ISO8859-1 characters.

	char* p = name.data();

	if ((*p & 0x80) == 0)
	{
		*p = ::toupper(*p);
		return 1;
	}

	Tcl_UniChar c;
	char buf[10];

	p += ::utfToUniChar(p, c);
	c = Tcl_UniCharToUpper(c);

	unsigned n = Tcl_UniCharToUtf(c, buf);
	name.replace(0, p - name.c_str(), buf, n);

	return n;
}


unsigned
Codec::firstCharToUpper(mstl::string const& name, mstl::string& result)
{
	M_REQUIRE(sys::utf8::validate(name));
	M_REQUIRE(name.c_str() != result.c_str());

	// IMPORTANT NOTE:
	// At this time, the case conversions are only defined for the ISO8859-1 characters.

	char const* p = name.c_str();

	if (*p & 0x80)
	{
		result += ::toupper(*p);
		return 1;
	}

	Tcl_UniChar c;
	char buf[10];

	p += ::utfToUniChar(p, c);
	c = Tcl_UniCharToUpper(c);

	unsigned n = Tcl_UniCharToUtf(c, buf);
	result.assign(buf, n);

	return n;
}


void
Codec::mapFromGerman(mstl::string const& name, mstl::string& result)
{
	M_REQUIRE(fitsRegion(name, 1));
	return sys::utf8::german::map(name, result);
}


bool
Codec::matchAscii(mstl::string const& utf8, mstl::string const& ascii, bool noCase)
{
	M_REQUIRE(ascii.is_7bit());
	return sys::utf8::ascii::match(utf8, ascii, noCase);
}


bool
Codec::matchGerman(mstl::string const& utf8, mstl::string const& ascii, bool noCase)
{
	M_REQUIRE(ascii.is_7bit());
	return sys::utf8::german::match(utf8, ascii, noCase);
}


bool
Codec::isConvertibleToLatin1(mstl::string const& str) const
{
	char const* s = str.c_str();
	char const* e = s + str.size();

	for ( ; s < e; ++s)
	{
		unsigned char c = *s;

		if (c & 0x80)
		{
			if (  c == 0xef
				 && static_cast<unsigned char>(s[1]) == 0xbf
				 && static_cast<unsigned char>(s[2]) == 0xbd)
			{
			  // the UTF-8 replacement character is convertible
			  s += 2;
			}
			else
			{
				if (c < 0xc2 || 0xc3 < c)
					return false;

				c = *++s;

				if (c < 0x80 || 0xbf < c)
					return false;
			}
		}
	}

	return true;
}


unsigned
Codec::forceValidUtf8(mstl::string& str, mstl::string const& replacement)
{
	unsigned removed = removeInvalidSequences(str, replacement) + sys::utf8::makeValid(str, replacement);
	if (removed)
		m_error = true;
	return removed;
}


unsigned
Codec::removeInvalidSequences(mstl::string& str, mstl::string const& replacement)
{
	// remove overlong sequences:
	//		c0 xx
	//		e0 80 xx
	//		f0 80 80 xx
	//		f8 80 80 80 xx
	//		fc 80 80 80 80 xx
	//
	// and more...

	char*			s = str.data();
	char const*	e = s + str.size();

	unsigned removed = 0;

	mstl::string result;
	result.reserve(str.capacity());

	while (s < e)
	{
		if (static_cast<unsigned char>(s[0]) < 0x80)							// 0bbbbbbb
		{
			result.append(*s++);
		}
		else if ((s[0] & 0xe0) == 0xc0)		// 110bbbbb 10bbbbbb
		{
			if ((s[1] & 0xc0) != 0x80)			// invalid
			{
				fprintf(stderr, "invalid two-byte UTF-8 sequence detected\n");
				result.append(replacement);
				removed += 1;
			}
			else if ((s[0] & 0xfe) == 0xc0)	// overlong
			{
				fprintf(stderr, "overlong two-byte UTF-8 sequence detected\n");
				result.append(s[1] & 0x7f);
			}
			else
			{
				result.append(s, 2);
			}

			s += 2;
		}
		else if ((s[0] & 0xf0) == 0xe0)		// 1110bbbb 10bbbbbb 10bbbbbb
		{
			if ((s[1] & 0xc0) != 0x80 || (s[2] & 0xc0) != 0x80)					// invalid
			{
				fprintf(stderr, "invalid three-byte UTF-8 sequence detected\n");
				result.append(replacement);
				removed += 1;
			}
			else if (	static_cast<unsigned char>(s[0]) == 0xe0
						&& (static_cast<unsigned char>(s[1]) & 0xe0) == 0x80)		// overlong
			{
				fprintf(stderr, "overlong three-byte UTF-8 sequence detected\n");
				result.append(s[2] & 0x7f);
			}
			else if (	static_cast<unsigned char>(s[0]) == 0xed
						&& (static_cast<unsigned char>(s[1]) & 0xe0) == 0xa0)		// surrogate
			{
				fprintf(stderr, "invalid three-byte surrogate in UTF-8 sequence detected\n");
				result.append(replacement);
				removed += 1;
			}
			else if (	static_cast<unsigned char>(s[0]) == 0xef
						&& static_cast<unsigned char>(s[1]) == 0xbf
						&& (static_cast<unsigned char>(s[2]) & 0xfe) == 0xbe)	// U+FFFE or U+FFFF
			{
				fprintf(	stderr,
							"invalid code point U+FFF%c in UTF-8 sequence detected\n",
							static_cast<unsigned char>(s[2]) == 0xbf ? 'E' : 'F');
				result.append(replacement);
				removed += 1;
			}
			else
			{
				result.append(s, 3);
			}

			s += 3;
		}
		else if ((static_cast<unsigned char>(s[0]) & 0xf8) == 0xf0)	// 11110bbb 10bbbbbb 10bbbbbb 10bbbbbb
		{
			if ((s[1] & 0xc0) != 0x80 || (s[2] & 0xc0) != 0x80 || (s[3] & 0xc0) != 0x80)	// invalid
			{
				fprintf(stderr, "invalid four-byte UTF-8 sequence detected\n");
				result.append(replacement);
				removed += 1;
			}
			else if (	static_cast<unsigned char>(s[0]) == 0xf0
						&& (static_cast<unsigned char>(s[1]) & 0xf0) == 0x80)	// overlong
			{
				fprintf(stderr, "overlong four-byte UTF-8 sequence detected\n");
				result.append(s[3] & 0x7f);
			}
			else if (	(	static_cast<unsigned char>(s[0]) == 0xf4
							&& static_cast<unsigned char>(s[1]) > 0x8f)
						|| static_cast<unsigned char>(s[0]) > 0xf4)	// > U+10FFFF
			{
				fprintf(stderr, "invalid code point > U+10FFFF in UTF-8 sequence detected\n");
				result.append(replacement);
				removed += 1;
			}
			else
			{
				result.append(s, 4);
			}

			s += 4;
		}
		else
		{
			result.append(replacement);
			removed += 1;
			s += 5;
			while (s < e && (*s & 0xc0) == 0x80)
				++s;
		}
	}

	str.swap(result);
	return removed;
}


void
Codec::makeShortName(mstl::string const& name, mstl::string& result)
{
	// NOTE: we assume ASCII spaces

	char const* p = name.c_str();

	if (*p == '\0')
	{
		result.clear();
		return;
	}

	Tcl_UniChar u;
	char const* q = p + ::utfToUniChar(p, u);

	while (u && Tcl_UniCharIsAlpha(u))
	{
		p = q;
		while (::isalpha(*p))
			p = Tcl_UtfNext(p);
		if (*p == '-')
			++p;
		while (::isSpace(*p))
			++p;
		q = p + ::utfToUniChar(p, u);
	}

	while (p > name.c_str() && ::isSpace(p[-1]))
		--p;

	if (p > name.c_str() + 1 && ::isspace(p[-2]))
	{
		p -= 2;
		while (p > name.c_str() &&::isspace(p[-1]))
			--p;
	}

	result.assign(name, p - name.c_str());
}


bool
Codec::fitsRegion(mstl::string const& s, unsigned region)
{
	M_REQUIRE(region <= U_NUMBER_OF(NonDiacriticsLookup));

	switch (region)
	{
		case 0: return s.is_7bit();
		case 1: return ::fitsRegion1(s); break;
		case 2: return ::fitsRegion2(s); break;
		case 3: return ::fitsRegion3(s); break;
		case 4: return ::fitsRegion4(s); break;
		case 5: return ::fitsRegion5(s); break;
		case 6: return ::fitsRegion6(s); break;
	}

	return false;	// never reached
}


mstl::string const&
Codec::convertToNonDiacritics(unsigned region, mstl::string const& s, mstl::string& buffer)
{
	M_REQUIRE(region <= U_NUMBER_OF(NonDiacriticsLookup));
	M_REQUIRE(fitsRegion(s, region));
	M_REQUIRE(s.c_str() != buffer.c_str());

	if (region == 0)
		return s;

	buffer.clear();
	buffer.reserve(mstl::mul2(s.size()));

	char const* const** lookup = NonDiacriticsLookup[region - 1];

	char const* p = s.begin();
	char const* e = s.end();

	while (p < e)
	{
		Tcl_UniChar u;

		p += ::utfToUniChar(p, u);

		M_ASSERT(unsigned(u >> 8) < U_NUMBER_OF(NonDiacriticsLookup[0]));

		char const* const* table = lookup[u >> 8];

		M_ASSERT(table);

		char const* q = table[u & 0xff];

		M_ASSERT(q);

		if (q[0])
		{
			buffer += q[0];

			if (q[1])
				buffer += q[1];
		}
	}

	return buffer;
}


mstl::string const&
Codec::convertToShortNonDiacritics(unsigned region, mstl::string const& s, mstl::string& buffer)
{
	M_REQUIRE(region <= U_NUMBER_OF(NonDiacriticsLookup));
	M_REQUIRE(fitsRegion(s, region));
	M_REQUIRE(s.c_str() != buffer.c_str());

	if (region == 0)
		return s;

	buffer.clear();
	buffer.reserve(mstl::mul2(s.size()));

	char const* const** lookup = NonDiacriticsLookup[region - 1];

	char const* p = s.begin();
	char const* e = s.end();

	while (p < e)
	{
		Tcl_UniChar u;

		p += ::utfToUniChar(p, u);

		M_ASSERT(unsigned(u >> 8) < U_NUMBER_OF(NonDiacriticsLookup[0]));

		char const* const* table = lookup[u >> 8];

		M_ASSERT(table);

		char const* q = table[u & 0xff];

		M_ASSERT(q);

		if (q[0])
		{
			buffer += q[0];

			if (u == 0x00df)
				buffer += q[1];	// German es-zet is the only exception (so far)
		}
	}

	return buffer;
}


unsigned
Codec::getEncodingList(EncodingList& result)
{
	Tcl_GetEncodingNames(::sys::tcl::interp());

	Tcl_Obj*		list = Tcl_GetObjResult(::sys::tcl::interp());
	Tcl_Obj**	objv;
	int			objc;

	Tcl_ListObjGetElements(::sys::tcl::interp(), list, &objc, &objv);
	::qsort(objv, objc, sizeof(Tcl_Obj*), ::compareEncodings);

	result.clear();

	for (int i = 0; i < objc; ++i)
		result.push_back().assign(Tcl_GetString(objv[i]));

	return objc;
}


bool
Codec::checkEncoding(mstl::string const& name)
{
	if (Tcl_Encoding enc = Tcl_GetEncoding(::sys::tcl::interp(), name))
	{
		Tcl_FreeEncoding(enc);
		return true;
	}

	return false;
}


unsigned
Codec::findRegion(mstl::string const& name)
{
	for (unsigned region = 1; region <= 6; ++region)
	{
		if (fitsRegion(name, region))
			return region;
	}

	return 0;
}

// vi:set ts=3 sw=3:
